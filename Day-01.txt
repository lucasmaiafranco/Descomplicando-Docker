DAY 1

## Aula 01

Container -> Isolamento
				Lógico - container roda isolado da máquina, network, processos, usuários
				Físico - é possível limitar os recursos para o container, CPU, memória
				
Responsáveis pelos isolamentos

	Lógico - namespaces
	
	Físico - cgroup
	
## Aula 02

Imagens de container são baseadas em camadas, somente a última camada é RW (logs), as outras são RO (Ready Only)

## Aula 03

VM - Cada vm possui seu kernel
Container - Utiliza o mesmo kernel do Host

Netfilter - responsavel pela gerencia de redes no docker
			destination nat, redirecionamento, filtro de pacotes
			
cgroup - responsavel por fazer isolamentos de CPU e memória

namespaces - responsavel pelo isolamento de processo, redes, pontos de montagens

## Aula 04

Instalação do Docker

apt install curl -y && curl -fsSL https://get.docker.com -o get-docker.sh && sudo sh ./get-docker.sh

docker client - é o comando que utilizamos, CLI
docker server - é quem gerencia os containers

Versão

	docker version
	
Visualizar containers em execução

	docker container ls
	
Visualizar todos containers

	docker container ls -a
	
Primeiro container

	docker container run -ti hello-world
	
	-ti = terminal e interatividade
	
Criando containers

	docker container run -ti ubuntu
	
	docker container run -ti centos
	
Para sair do container sem matar ele(bash)

	CTRL + p + q
	
Conectar no container novamente

	docker container attach <container ID ou nome do container>
	
Executar container como daemon

	docker container -d nginx
	
Executar um comando dentro do container

	docker container exec -ti [CONTAINER ID] [COMANDO]
	docker container exec -ti 86cd7182695f ls /usr/share/nginx/html
	docker container exec -ti 86cd7182695f bash
	
start/stop/restart container

	docker container start 86cd7182695f
	docker container stop 86cd7182695f
	docker container restart 86cd7182695f
	
pause/unpause container

	docker container pause <container ID>
	docker container unpause <container ID>